{"version":3,"sources":["webpack:///./src/components/layout/index.js","webpack:///./node_modules/smartypants/smartypants.es6.js","webpack:///./src/scss/global.scss"],"names":["Layout","title","displayTitle","titleLink","path","returnLinks","returnLinksContent","description","children","noMargin","hasHero","centered","socialCard","hero","centerTitle","hidewarning","flipColors","noContainer","forceSubNavigationKey","data","useStaticQuery","siteTitle","site","siteMetadata","id","tags_to_skip","SmartyPants","do_quotes","do_backticks","do_dashes","do_ellipses","do_stupefy","text","arguments","length","undefined","attr","convert_quot","toString","replace","i","c","tokens","_tokenize","result","in_pre","prev_token_last_char","_i","cur_token","matched","exec","t","last_char","substring","ProcessEscapes","EducateDashes","EducateDashesOldSchool","EducateDashesOldSchoolInverted","EducateEllipses","EducateBackticks","EducateSingleBackticks","test","EducateQuotes","StupefyEntities","str","RegExp","concat","pos","len","match","index","_t","push","lastIndex","_t2","module","exports"],"mappings":"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","file":"98c86b45c96f6fc177c9b527750beaca4afec20e-f3cac4567a6ec06696f2.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { SkipNavContent } from '@reach/skip-nav'\nimport Header from './header'\nimport Footer from './footer'\nimport SEO from '~components/utils/seo'\nimport Container from '~components/common/container'\nimport SkipNavigation from '~components/utils/skip-navigation'\nimport '~scss/global.scss'\n\nconst Layout = ({\n  title,\n  displayTitle,\n  titleLink,\n  path,\n  returnLinks,\n  returnLinksContent,\n  description,\n  children,\n  noMargin,\n  hasHero,\n  centered,\n  socialCard,\n  hero,\n  centerTitle,\n  hidewarning = false,\n  flipColors = false,\n  noContainer = false,\n  forceSubNavigationKey = false,\n}) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <SEO title={title} description={description} socialCard={socialCard} />\n      <SkipNavigation />\n      <Header\n        siteTitle={data.site.siteMetadata.title}\n        title={displayTitle || title}\n        titleLink={titleLink}\n        path={path}\n        noMargin={noMargin}\n        hasHero={hasHero}\n        returnLinks={returnLinks}\n        returnLinksContent={returnLinksContent}\n        hero={hero}\n        centerTitle={centerTitle}\n        forceSubNavigationKey={forceSubNavigationKey}\n        flipColors={flipColors}\n        hidewarning={hidewarning}\n      />\n      <main id=\"main\">\n        <SkipNavContent />\n        {noContainer ? (\n          <>{children}</>\n        ) : (\n          <Container centered={centered}>{children}</Container>\n        )}\n      </main>\n      <Footer flipColors={flipColors} />\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","var tags_to_skip = /<(\\/?)(?:pre|code|kbd|script|math)[^>]*>/i;\n/**\n * @param text text to be parsed\n * @param attr value of the smart_quotes=\"\" attribute\n */\n\nvar SmartyPants = function SmartyPants() {\n  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var attr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '1';\n  var do_quotes;\n  var do_backticks;\n  var do_dashes;\n  var do_ellipses;\n  var do_stupefy;\n  var convert_quot = 0;\n\n  if (typeof attr === 'number') {\n    attr = attr.toString();\n  } else {\n    attr = attr.replace(/\\s/g, '');\n  }\n  /**\n   * Parse attributes:\n   * 0 : do nothing\n   * 1 : set all\n   * 2 : set all, using old school en- and em- dash shortcuts\n   * 3 : set all, using inverted old school en and em- dash shortcuts\n   *\n   * q : quotes\n   * b : backtick quotes (``double'' only)\n   * B : backtick quotes (``double'' and `single')\n   * d : dashes\n   * D : old school dashes\n   * i : inverted old school dashes\n   * e : ellipses\n   * w : convert &quot; entities to \" for Dreamweaver users\n   */\n\n\n  if (attr === '0') {\n    // Do nothing\n    return text;\n  } else if (attr === '1') {\n    // Do everything, turn all options on.\n    do_quotes = 1;\n    do_backticks = 1;\n    do_dashes = 1;\n    do_ellipses = 1;\n  } else if (attr === '2') {\n    // Do everything, turn all options on, use old school dash shorthand.\n    do_quotes = 1;\n    do_backticks = 1;\n    do_dashes = 2;\n    do_ellipses = 1;\n  } else if (attr === '3') {\n    // Do everything, turn all options on, use inverted old school dash shorthand.\n    do_quotes = 1;\n    do_backticks = 1;\n    do_dashes = 3;\n    do_ellipses = 1;\n  } else if (attr === '-1') {\n    // Special \"stupefy\" mode.\n    do_stupefy = 1;\n  } else {\n    for (var i = 0; i < attr.length; i++) {\n      var c = attr[i];\n\n      if (c === 'q') {\n        do_quotes = 1;\n      }\n\n      if (c === 'b') {\n        do_backticks = 1;\n      }\n\n      if (c === 'B') {\n        do_backticks = 2;\n      }\n\n      if (c === 'd') {\n        do_dashes = 1;\n      }\n\n      if (c === 'D') {\n        do_dashes = 2;\n      }\n\n      if (c === 'i') {\n        do_dashes = 3;\n      }\n\n      if (c === 'e') {\n        do_ellipses = 1;\n      }\n\n      if (c === 'w') {\n        convert_quot = 1;\n      }\n    }\n  }\n\n  var tokens = _tokenize(text);\n\n  var result = '';\n  /**\n   * Keep track of when we're inside <pre> or <code> tags.\n   */\n\n  var in_pre = 0;\n  /**\n   * This is a cheat, used to get some context\n   * for one-character tokens that consist of\n   * just a quote char. What we do is remember\n   * the last character of the previous text\n   * token, to use as context to curl single-\n   * character quote tokens correctly.\n   */\n\n  var prev_token_last_char = '';\n\n  for (var _i = 0; _i < tokens.length; _i++) {\n    var cur_token = tokens[_i];\n\n    if (cur_token[0] === 'tag') {\n      result = result + cur_token[1];\n      var matched = tags_to_skip.exec(cur_token[1]);\n\n      if (matched) {\n        if (matched[1] === '/') {\n          in_pre = 0;\n        } else {\n          in_pre = 1;\n        }\n      }\n    } else {\n      var t = cur_token[1];\n      var last_char = t.substring(t.length - 1, t.length); // Remember last char of this token before processing.\n\n      if (!in_pre) {\n        t = ProcessEscapes(t);\n\n        if (convert_quot) {\n          t = t.replace(/$quot;/g, '\"');\n        }\n\n        if (do_dashes) {\n          if (do_dashes === 1) {\n            t = EducateDashes(t);\n          }\n\n          if (do_dashes === 2) {\n            t = EducateDashesOldSchool(t);\n          }\n\n          if (do_dashes === 3) {\n            t = EducateDashesOldSchoolInverted(t);\n          }\n        }\n\n        if (do_ellipses) {\n          t = EducateEllipses(t);\n        } // Note: backticks need to be processed before quotes.\n\n\n        if (do_backticks) {\n          t = EducateBackticks(t);\n\n          if (do_backticks === 2) {\n            t = EducateSingleBackticks(t);\n          }\n        }\n\n        if (do_quotes) {\n          if (t === '\\'') {\n            // Special case: single-character ' token\n            if (/\\S/.test(prev_token_last_char)) {\n              t = '&#8217;';\n            } else {\n              t = '&#8216;';\n            }\n          } else if (t === '\"') {\n            // Special case: single-character \" token\n            if (/\\S/.test(prev_token_last_char)) {\n              t = '&#8221;';\n            } else {\n              t = '&#8220;';\n            }\n          } else {\n            // Normal case:\n            t = EducateQuotes(t);\n          }\n        }\n\n        if (do_stupefy) {\n          t = StupefyEntities(t);\n        }\n      }\n\n      prev_token_last_char = last_char;\n      result = result + t;\n    }\n  }\n\n  return result;\n};\n\nvar SmartQuotes = function SmartQuotes() {\n  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var attr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '1';\n\n  /**\n   * should we educate ``backticks'' -style quotes?\n   */\n  // var do_backticks:number;\n  if (typeof attr === 'number') {\n    attr = attr.toString();\n  } else {\n    attr = attr.replace(/\\s/g, '');\n  }\n\n  if (attr === '0') {\n    // Do nothing\n    return text; // } else if (attr === '2') {\n    //   // smarten ``backticks'' -style quotes\n    //   do_backticks = 1;\n    // } else {\n    //   do_backticks = 0;\n  }\n  /**\n   * Special case to handle quotes at the very end of $text when preceded by\n   * an HTML tag. Add a space to give the quote education algorithm a bit of\n   * context, so that it can guess correctly that it's a closing quote:\n   */\n\n\n  var add_extra_space = 0;\n\n  if (/>['\"]$/.test(text)) {\n    add_extra_space = 1; // Remember, so we can trim the extra space later.\n\n    text = text + ' ';\n  }\n\n  var tokens = _tokenize(text);\n\n  var result = '';\n  /**\n   * Keep track of when we're inside <pre> or <code> tags.\n   */\n\n  var in_pre = 0;\n  /**\n   * This is a cheat, used to get some context\n   * for one-character tokens that consist of\n   * just a quote char. What we do is remember\n   * the last character of the previous text\n   * token, to use as context to curl single-\n   * character quote tokens correctly.\n   */\n\n  var prev_token_last_char = '';\n\n  for (var i = 0; i < tokens.length; i++) {\n    var cur_token = tokens[i];\n\n    if (cur_token[0] === 'tag') {\n      result = result + cur_token[1];\n      var matched = tags_to_skip.exec(cur_token[1]);\n\n      if (matched) {\n        if (matched[1] === '/') {\n          in_pre = 0;\n        } else {\n          in_pre = 1;\n        }\n      }\n    } else {\n      var t = cur_token[1];\n      var last_char = t.substring(t.length - 1, t.length); // Remember last char of this token before processing.\n\n      if (!in_pre) {\n        t = ProcessEscapes(t);\n\n        if (t === '\\'') {\n          // Special case: single-character ' token\n          if (/\\S/.test(prev_token_last_char)) {\n            t = '&#8217;';\n          } else {\n            t = '&#8216;';\n          }\n        } else if (t === '\"') {\n          // Special case: single-character \" token\n          if (/\\S/.test(prev_token_last_char)) {\n            t = '&#8221;';\n          } else {\n            t = '&#8220;';\n          }\n        } else {\n          // Normal case:\n          t = EducateQuotes(t);\n        }\n      }\n\n      prev_token_last_char = last_char;\n      result = result + t;\n    }\n  }\n\n  if (add_extra_space) {\n    result = result.replace(/ $/, '');\n  }\n\n  return result;\n};\n\nvar SmartDashes = function SmartDashes() {\n  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var attr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '1';\n  // reference to the subroutine to use for dash education, default to EducateDashes:\n  var dash_sub_ref = EducateDashes;\n\n  if (typeof attr === 'number') {\n    attr = attr.toString();\n  } else {\n    attr = attr.replace(/\\s/g, '');\n  }\n\n  if (attr === '0') {\n    // Do nothing\n    return text;\n  } else if (attr === '2') {\n    // use old smart dash shortcuts, \"--\" for en, \"---\" for em\n    dash_sub_ref = EducateDashesOldSchool;\n  } else if (attr === '3') {\n    // inverse of 2, \"--\" for em, \"---\" for en\n    dash_sub_ref = EducateDashesOldSchoolInverted;\n  }\n\n  var tokens = _tokenize(text);\n\n  var result = '';\n  /**\n   * Keep track of when we're inside <pre> or <code> tags.\n   */\n\n  var in_pre = 0;\n\n  for (var i = 0; i < tokens.length; i++) {\n    var cur_token = tokens[i];\n\n    if (cur_token[0] === 'tag') {\n      result = result + cur_token[1];\n      var matched = tags_to_skip.exec(cur_token[1]);\n\n      if (matched) {\n        if (matched[1] === '/') {\n          in_pre = 0;\n        } else {\n          in_pre = 1;\n        }\n      }\n    } else {\n      var t = cur_token[1];\n\n      if (!in_pre) {\n        t = ProcessEscapes(t);\n        t = dash_sub_ref(t);\n      }\n\n      result = result + t;\n    }\n  }\n\n  return result;\n};\n\nvar SmartEllipses = function SmartEllipses() {\n  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var attr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '1';\n\n  if (typeof attr === 'number') {\n    attr = attr.toString();\n  } else {\n    attr = attr.replace(/\\s/g, '');\n  }\n\n  if (attr === '0') {\n    // Do nothing\n    return text;\n  }\n\n  var tokens = _tokenize(text);\n\n  var result = '';\n  /**\n   * Keep track of when we're inside <pre> or <code> tags.\n   */\n\n  var in_pre = 0;\n\n  for (var i = 0; i < tokens.length; i++) {\n    var cur_token = tokens[i];\n\n    if (cur_token[0] === 'tag') {\n      result = result + cur_token[1];\n      var matched = tags_to_skip.exec(cur_token[1]);\n\n      if (matched) {\n        if (matched[1] === '/') {\n          in_pre = 0;\n        } else {\n          in_pre = 1;\n        }\n      }\n    } else {\n      var t = cur_token[1];\n\n      if (!in_pre) {\n        t = ProcessEscapes(t);\n        t = EducateEllipses(t);\n      }\n\n      result = result + t;\n    }\n  }\n\n  return result;\n};\n/**\n * @param {string} str String\n * @return {string} The string, with \"educated\" curly quote HTML entities.\n *\n * Example input:  \"Isn't this fun?\"\n * Example output: &#8220;Isn&#8217;t this fun?&#8221;\n */\n\n\nvar EducateQuotes = function EducateQuotes(str) {\n  /**\n   * Make our own \"punctuation\" character class, because the POSIX-style\n   * [:PUNCT:] is only available in Perl 5.6 or later:\n   *\n   * JavaScript don't have punctuation class neither.\n   */\n  var punct_class = '[!\"#\\$\\%\\'()*+,-./:;<=>?\\@\\[\\\\\\]\\^_`{|}~]'; // eslint-disable-line no-useless-escape\n\n  /**\n   * Special case if the very first character is a quote\n   * followed by punctuation at a non-word-break. Close the quotes by brute force:\n   */\n\n  str = str.replace(new RegExp(\"^'(?=\".concat(punct_class, \"\\\\B)\")), '&#8217;'); // eslint-disable-line no-useless-escape\n\n  str = str.replace(new RegExp(\"^\\\"(?=\".concat(punct_class, \"\\\\B)\")), '&#8221;'); // eslint-disable-line no-useless-escape\n\n  /**\n   * Special case for double sets of quotes, e.g.:\n   *   <p>He said, \"'Quoted' words in a larger quote.\"</p>\n   */\n\n  str = str.replace(/\"'(?=\\w)/, '&#8220;&#8216;');\n  str = str.replace(/'\"(?=\\w)/, '&#8216;&#8220;');\n  /**\n   * Special case for decade abbreviations (the '80s):\n   */\n\n  str = str.replace(/'(?=\\d\\d)/, '&#8217;');\n  var close_class = '[^\\\\ \\\\t\\\\r\\\\n\\\\[\\\\{\\\\(\\\\-]'; // eslint-disable-line no-useless-escape\n\n  var not_close_class = '[\\\\ \\\\t\\\\r\\\\n\\\\[\\\\{\\\\(\\\\-]'; // eslint-disable-line no-useless-escape\n\n  var dec_dashes = '&#8211;|&#8212;';\n  /**\n   * Get most opening single quotes:\n   * s {\n   *     (\n   *         \\s          |   # a whitespace char, or\n   *         &nbsp;      |   # a non-breaking space entity, or\n   *         --          |   # dashes, or\n   *         &[mn]dash;  |   # named dash entities\n   *         $dec_dashes |   # or decimal entities\n   *         &\\#x201[34];    # or hex\n   *     )\n   *     '                   # the quote\n   *     (?=\\w)              # followed by a word character\n   * } {$1&#8216;}xg;\n   */\n\n  str = str.replace(new RegExp(\"(\\\\s|&nbsp;|--|&[mn]dash;|\".concat(dec_dashes, \"|&#x201[34])'(?=\\\\w)\"), 'g'), '\\$1&#8216;'); // eslint-disable-line no-useless-escape\n\n  /**\n   * Single closing quotes:\n   * s {\n   *     ($close_class)?\n   *     '\n   *     (?(1)|          # If $1 captured, then do nothing;\n   *       (?=\\s | s\\b)  # otherwise, positive lookahead for a whitespace\n   *     )               # char or an 's' at a word ending position. This\n   *                     # is a special case to handle something like:\n   *                     # \"<i>Custer</i>'s Last Stand.\"\n   * } {$1&#8217;}xgi;\n   */\n\n  str = str.replace(new RegExp(\"(\".concat(close_class, \")'\"), 'g'), '\\$1&#8217;'); // eslint-disable-line no-useless-escape\n\n  str = str.replace(new RegExp(\"(\".concat(not_close_class, \"?)'(?=\\\\s|s\\\\b)\"), 'g'), '\\$1&#8217;'); // eslint-disable-line no-useless-escape\n\n  /**\n   * Any remaining single quotes should be opening ones:\n   */\n\n  str = str.replace(/'/g, '&#8216;');\n  /**\n   * Get most opening double quotes:\n   * s {\n   *     (\n   *         \\s          |   # a whitespace char, or\n   *         &nbsp;      |   # a non-breaking space entity, or\n   *         --          |   # dashes, or\n   *         &[mn]dash;  |   # named dash entities\n   *         $dec_dashes |   # or decimal entities\n   *         &\\#x201[34];    # or hex\n   *     )\n   *     \"                   # the quote\n   *     (?=\\w)              # followed by a word character\n   * } {$1&#8220;}xg;\n   */\n\n  str = str.replace(new RegExp(\"(\\\\s|&nbsp;|--|&[mn]dash;|\".concat(dec_dashes, \"|&#x201[34])\\\"(?=\\\\w)\"), 'g'), '\\$1&#8220;'); // eslint-disable-line no-useless-escape\n\n  /**\n   * Double closing quotes:\n   * s {\n   *     ($close_class)?\n   *     \"\n   *     (?(1)|(?=\\s))   # If $1 captured, then do nothing;\n   *                        # if not, then make sure the next char is whitespace.\n   * } {$1&#8221;}xg;\n   */\n\n  str = str.replace(new RegExp(\"(\".concat(close_class, \")\\\"\"), 'g'), '\\$1&#8221;'); // eslint-disable-line no-useless-escape\n\n  str = str.replace(new RegExp(\"(\".concat(not_close_class, \"?)\\\"(?=\\\\s)\"), 'g'), '\\$1&#8221;'); // eslint-disable-line no-useless-escape\n\n  /**\n   * Any remaining quotes should be opening ones.\n   */\n\n  str = str.replace(/\"/g, '&#8220;');\n  return str;\n};\n/**\n * @param {string} str String\n * @return {string} The string, with ``backticks'' -style double quotes\n *                  translated into HTML curly quote entities.\n *\n * Example input:  ``Isn't this fun?''\n * Example output: &#8220;Isn't this fun?&#8221;\n */\n\n\nvar EducateBackticks = function EducateBackticks(str) {\n  str = str.replace(/``/g, '&#8220;');\n  str = str.replace(/''/g, '&#8221;');\n  return str;\n};\n/**\n * @param {string} str String\n * @return {string} The string, with `backticks' -style single quotes\n *                  translated into HTML curly quote entities.\n *\n * Example input:  `Isn't this fun?'\n * Example output: &#8216;Isn&#8217;t this fun?&#8217;\n */\n\n\nvar EducateSingleBackticks = function EducateSingleBackticks(str) {\n  str = str.replace(/`/g, '&#8216;');\n  str = str.replace(/'/g, '&#8217;');\n  return str;\n};\n/**\n * @param {string} str String\n * @return {string} The string, with each instance of \"--\" translated to\n *                  an em-dash HTML entity.\n */\n\n\nvar EducateDashes = function EducateDashes(str) {\n  str = str.replace(/--/g, '&#8212;');\n  return str;\n};\n/**\n * @param {string} str String\n * @return {string} The string, with each instance of \"--\" translated to\n *                  an en-dash HTML entity, and each \"---\" translated to\n *                  an em-dash HTML entity.\n */\n\n\nvar EducateDashesOldSchool = function EducateDashesOldSchool(str) {\n  str = str.replace(/---/g, '&#8212;');\n  str = str.replace(/--/g, '&#8211;');\n  return str;\n};\n/**\n * @param {string} str String\n * @return {string} The string, with each instance of \"--\" translated to\n *                  an em-dash HTML entity, and each \"---\" translated to\n *                  an en-dash HTML entity. Two reasons why: First, unlike the\n *                  en- and em-dash syntax supported by\n *                  EducateDashesOldSchool(), it's compatible with existing\n *                  entries written before SmartyPants 1.1, back when \"--\" was\n *                  only used for em-dashes.  Second, em-dashes are more\n *                  common than en-dashes, and so it sort of makes sense that\n *                  the shortcut should be shorter to type. (Thanks to Aaron\n *                  Swartz for the idea.)\n */\n\n\nvar EducateDashesOldSchoolInverted = function EducateDashesOldSchoolInverted(str) {\n  str = str.replace(/---/g, '&#8211;');\n  str = str.replace(/--/g, '&#8212;');\n  return str;\n};\n/**\n * @param {string} str String\n * @return {string} The string, with each instance of \"...\" translated to\n *                  an ellipsis HTML entity. Also converts the case where\n *                  there are spaces between the dots.\n *\n * Example input:  Huh...?\n * Example output: Huh&#8230;?\n */\n\n\nvar EducateEllipses = function EducateEllipses(str) {\n  str = str.replace(/\\.\\.\\./g, '&#8230;');\n  str = str.replace(/\\. \\. \\./g, '&#8230;');\n  return str;\n};\n/**\n * @param {string} str String\n * @return {string} The string, with each SmartyPants HTML entity translated to\n *                  its ASCII counterpart.\n *\n * Example input:  &#8220;Hello &#8212; world.&#8221;\n * Example output: \"Hello -- world.\"\n */\n\n\nvar StupefyEntities = function StupefyEntities(str) {\n  str = str.replace(/&#8211;/g, '-'); // en-dash\n\n  str = str.replace(/&#8212;/g, '--'); // em-dash\n\n  str = str.replace(/&#8216;/g, '\\''); // open single quote\n\n  str = str.replace(/&#8217;/g, '\\''); // close single quote\n\n  str = str.replace(/&#8220;/g, '\"'); // open double quote\n\n  str = str.replace(/&#8221;/g, '\"'); // close double quote\n\n  str = str.replace(/&#8230;/g, '...'); // ellipsis\n\n  return str;\n};\n/**\n * @param {string} str String\n * @return {string} The string, with each SmartyPants HTML entity translated to\n *                  UTF-8 characters.\n *\n * Example input:  “Hello &#8217; world.”\n * Example output: \"Hello — world.\"\n */\n\n\nvar EducateEntities = function EducateEntities(text) {\n  var attr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '1';\n  var do_quotes;\n  var do_backticks;\n  var do_dashes;\n  var do_ellipses; // var do_stupefy:number;\n\n  if (typeof attr === 'number') {\n    attr = attr.toString();\n  } else {\n    attr = attr.replace(/\\s/g, '');\n  }\n\n  if (attr === '0') {\n    // Do nothing\n    return text;\n  } else if (attr === '1') {\n    // Do everything, turn all options on.\n    do_quotes = 1;\n    do_backticks = 1;\n    do_dashes = 1;\n    do_ellipses = 1;\n  } else if (attr === '2') {\n    // Do everything, turn all options on, use old school dash shorthand.\n    do_quotes = 1;\n    do_backticks = 1;\n    do_dashes = 3;\n    do_ellipses = 1;\n  } else if (attr === '3') {\n    // Do everything, turn all options on, use inverted old school dash shorthand.\n    do_quotes = 1;\n    do_backticks = 1;\n    do_dashes = 3;\n    do_ellipses = 1; // } else if (attr === '-1') {\n    //   // Special \"stupefy\" mode.\n    //   do_stupefy = 1;\n  } else {\n    for (var i = 0; i < attr.length; i++) {\n      var c = attr[i];\n\n      if (c === 'q') {\n        do_quotes = 1;\n      }\n\n      if (c === 'b') {\n        do_backticks = 1;\n      }\n\n      if (c === 'B') {\n        do_backticks = 2;\n      }\n\n      if (c === 'd') {\n        do_dashes = 1;\n      }\n\n      if (c === 'D') {\n        do_dashes = 2;\n      }\n\n      if (c === 'i') {\n        do_dashes = 3;\n      }\n\n      if (c === 'e') {\n        do_ellipses = 1;\n      }\n    }\n  }\n\n  if (do_dashes) {\n    text = text.replace(/&#8211;/g, \"\\u2013\"); // en-dash\n\n    text = text.replace(/&#8212;/g, \"\\u2014\"); // em-dash\n  }\n\n  if (do_quotes || do_backticks) {\n    text = text.replace(/&#8216;/g, \"\\u2018\"); // open single quote\n\n    text = text.replace(/&#8217;/g, \"\\u2019\"); // close single quote\n\n    text = text.replace(/&#8220;/g, \"\\u201C\"); // open double quote\n\n    text = text.replace(/&#8221;/g, \"\\u201D\"); // close double quote\n  }\n\n  if (do_ellipses) {\n    text = text.replace(/&#8230;/g, \"\\u2026\"); // ellipsis\n  }\n\n  return text;\n};\n/**\n * @param {string} str String\n * @return {string} The string, with each SmartyPants UTF-8 chars translated to\n *                  its ASCII counterpart.\n *\n * Example input:  &#8220;Hello &#8212; world.&#8221;\n * Example output: \"Hello -- world.\"\n */\n\n\nvar StupifyUTF8Char = function StupifyUTF8Char(str) {\n  str = str.replace(/\\u2013/g, '-'); // en-dash\n\n  str = str.replace(/\\u2014/g, '--'); // em-dash\n\n  str = str.replace(/\\u2018/g, '\\''); // open single quote\n\n  str = str.replace(/\\u2019/g, '\\''); // close single quote\n\n  str = str.replace(/\\u201c/g, '\"'); // open double quote\n\n  str = str.replace(/\\u201d/g, '\"'); // close double quote\n\n  str = str.replace(/\\u2026/g, '...'); // ellipsis\n\n  return str;\n};\n/**\n * @param {string} str String\n * @return {string} string, with after processing the following backslash\n *                  escape sequences. This is useful if you want to force a \"dumb\"\n *                  quote or other character to appear.\n *\n *                  Escape  Value\n *                  ------  -----\n *                  \\\\      &#92;\n *                  \\\"      &#34;\n *                  \\'      &#39;\n *                  \\.      &#46;\n *                  \\-      &#45;\n *                  \\`      &#96;\n *\n */\n\n\nvar ProcessEscapes = function ProcessEscapes(str) {\n  str = str.replace(/\\\\\\\\/g, '&#92;');\n  str = str.replace(/\\\\\"/g, '&#34;');\n  str = str.replace(/\\\\'/g, '&#39;');\n  str = str.replace(/\\\\\\./g, '&#46;');\n  str = str.replace(/\\\\-/g, '&#45;');\n  str = str.replace(/\\\\`/g, '&#96;');\n  return str;\n};\n/**\n * @param {string} str String containing HTML markup.\n * @return {Array<token>} Reference to an array of the tokens comprising the input\n *                        string. Each token is either a tag (possibly with nested,\n *                        tags contained therein, such as <a href=\"<MTFoo>\">, or a\n *                        run of text between tags. Each element of the array is a\n *                        two-element array; the first is either 'tag' or 'text';\n *                        the second is the actual value.\n *\n * Based on the _tokenize() subroutine from Brad Choate's MTRegex plugin.\n *     <http://www.bradchoate.com/past/mtregex.php>\n */\n\n\nvar _tokenize = function _tokenize(str) {\n  var pos = 0;\n  var len = str.length;\n  var tokens = [];\n  var match = /<!--[\\s\\S]*?-->|<\\?.*?\\?>|<[^>]*>/g;\n  var matched = null;\n\n  while (matched = match.exec(str)) {\n    // eslint-disable-line no-cond-assign\n    if (pos < matched.index) {\n      var _t = ['text', str.substring(pos, matched.index)];\n      tokens.push(_t);\n    }\n\n    var t = ['tag', matched.toString()];\n    tokens.push(t);\n    pos = match.lastIndex;\n  }\n\n  if (pos < len) {\n    var _t2 = ['text', str.substring(pos, len)];\n    tokens.push(_t2);\n  }\n\n  return tokens;\n};\n\nvar smartypantsu = function smartypantsu() {\n  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var attr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '1';\n  var str = SmartyPants(text, attr);\n\n  if (typeof attr === 'number') {\n    attr = attr.toString();\n  } else {\n    attr = attr.replace(/\\s/g, '');\n  }\n\n  if (attr === '-1') {\n    return StupifyUTF8Char(str);\n  } else {\n    return EducateEntities(str, attr);\n  }\n};\n\nexport { SmartyPants as smartypants };\nexport { SmartQuotes as smartquotes };\nexport { SmartDashes as smartdashes };\nexport { SmartEllipses as smartellipses };\nexport { smartypantsu };\nexport default SmartyPants;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"viewportSm\":\"480px\",\"viewportMs\":\"640px\",\"viewportMd\":\"768px\",\"viewportLg\":\"1080px\",\"viewportXl\":\"1200px\",\"text\":\"#303030\",\"link\":\"#000\",\"linkActive\":\"#8b8dc7\",\"colorPlum100\":\"#f2f2ff\",\"colorPlum200\":\"#d1d1e8\",\"colorPlum300\":\"#b6b7db\",\"colorPlum400\":\"#8b8dc7\",\"colorPlum500\":\"#6164ba\",\"colorPlum600\":\"#575aad\",\"colorPlum700\":\"#31347a\",\"colorPlum800\":\"#111354\",\"colorHoney100\":\"#fcf9eb\",\"colorHoney200\":\"#fbe8a9\",\"colorHoney300\":\"#f6ce7a\",\"colorHoney400\":\"#ffad4a\",\"colorHoney500\":\"#e2894e\",\"colorHoney600\":\"#c66b3e\",\"colorHoney700\":\"#924f34\",\"colorHoney800\":\"#6e2f1f\",\"colorBlueberry100\":\"#e2f1fc\",\"colorBlueberry200\":\"#8cc7f4\",\"colorBlueberry300\":\"#0091ea\",\"colorBlueberry400\":\"#004399\",\"colorBlueberry500\":\"#012656\",\"colorSlate100\":\"#edf1f2\",\"colorSlate200\":\"#d2d6d7\",\"colorSlate300\":\"#b7bcbd\",\"colorSlate400\":\"#9ca1a2\",\"colorSlate500\":\"#828688\",\"colorSlate600\":\"#676b6d\",\"colorSlate700\":\"#4c5153\",\"colorSlate800\":\"#313638\",\"colorStrawberry100\":\"#fbbcb2\",\"colorStrawberry200\":\"#dc472e\",\"qualitativeColorPalette100\":\"#b5e3db\",\"qualiTativecolorPalette200\":\"#cc0\",\"qualiTativecolorPalette300\":\"#a19bca\",\"qualiTativecolorPalette400\":\"#f4a071\",\"qualiTativecolorPalette500\":\"#2f6488\",\"qualiTativecolorPalette600\":\"#527740\",\"crdtAsian\":\"#E35942\",\"crdtWhite\":\"#cc0\",\"crdtBlack\":\"#a19bca\",\"crdtLatinx\":\"#f4a071\",\"crdtNonHispanic\":\"#111354\",\"crdtNhpi\":\"#2f6488\",\"crdtAian\":\"#527740\"};"],"sourceRoot":""}