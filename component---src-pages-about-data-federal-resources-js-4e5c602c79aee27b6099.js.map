{"version":3,"sources":["webpack:///./src/components/pages/about-data/federal-resources.js","webpack:///./src/components/pages/about-data/federal-trackers.js","webpack:///./src/pages/about-data/federal-resources.js"],"names":["categoryOrder","Resources","summary","resources","showSummaries","FederalResources","data","useStaticQuery","categories","map","slug","result","allContentfulDataSummaryCategory","nodes","find","node","summaries","forEach","summaryIndex","resource","resourceIndex","otherSummary","otherSummaryIndex","otherResource","contentful_id","topMargin","className","summaryStyle","toc","title","to","slugify","name","lower","allContentfulFederalTrackers","tracker","allContentfulFederalDataPortal","category","id","FederalTrackers","format","agency","link","href","description","dangerouslySetInnerHTML","__html","childMarkdownRemark","html","about","covid19Data","apIs","FederalResourcesPage","centered","content","contentfulSnippet","childContentfulSnippetContentTextNode"],"mappings":"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","file":"component---src-pages-about-data-federal-resources-js-4e5c602c79aee27b6099.js","sourcesContent":["import React from 'react'\nimport { graphql, useStaticQuery, Link } from 'gatsby'\nimport slugify from 'slugify'\nimport { TableOfContentsWrapper } from '~components/common/table-of-contents'\nimport DataSummaryResources from '~components/pages/about-data/data-summary-resources'\nimport summaryStyle from './data-summary.module.scss'\n\nconst categoryOrder = [\n  'testing-outcomes',\n  'race-and-ethnicity',\n  'long-term-care',\n  'vaccine-metadata',\n  'city-data',\n  'miscellaneous-repositories',\n]\n\nconst Resources = ({ summary }) => {\n  if (!summary.resources) {\n    return null\n  }\n  return <DataSummaryResources resources={summary.resources} showSummaries />\n}\n\nconst FederalResources = () => {\n  const data = useStaticQuery(graphql`\n    {\n      allContentfulDataSummaryCategory {\n        nodes {\n          title\n          slug\n          summaries {\n            title\n            slug\n            resources {\n              contentful_id\n              name\n              updatedAt(formatString: \"MMMM D, yyyy\")\n              linkUrl\n              downloadLinkUrl\n              description {\n                childMarkdownRemark {\n                  html\n                }\n              }\n              data_summary {\n                title\n                slug\n              }\n              relatedPosts {\n                title\n                slug\n                sys {\n                  contentType {\n                    sys {\n                      id\n                    }\n                  }\n                }\n              }\n              agency\n              chartLink\n              geographicUnits\n              queryLink\n              startDate(formatString: \"MMMM D, yyyy\")\n              timeseriesUnit\n              updateFrequency\n              youtubeVideoTitle\n              youtubeVideoUrl\n              screenshots {\n                description\n                fluid(maxWidth: 2000, sizes: \"4\") {\n                  aspectRatio\n                  sizes\n                  src\n                  srcSet\n                }\n              }\n            }\n          }\n        }\n      }\n      allContentfulFederalTrackers {\n        nodes {\n          name\n        }\n      }\n      allContentfulFederalDataPortal {\n        nodes {\n          name\n        }\n      }\n    }\n  `)\n\n  const categories = categoryOrder.map(slug => {\n    const result = data.allContentfulDataSummaryCategory.nodes.find(\n      node => node.slug === slug,\n    )\n    result.summaries.forEach((summary, summaryIndex) => {\n      if (summary.resources) {\n        summary.resources.forEach((resource, resourceIndex) => {\n          result.summaries.forEach((otherSummary, otherSummaryIndex) => {\n            if (otherSummary.resources) {\n              otherSummary.resources.forEach(otherResource => {\n                if (\n                  otherSummaryIndex !== summaryIndex &&\n                  otherResource.contentful_id === resource.contentful_id\n                ) {\n                  delete result.summaries[summaryIndex].resources[resourceIndex]\n                }\n              })\n            }\n          })\n        })\n      }\n    })\n    return result\n  })\n\n  return (\n    <>\n      <TableOfContentsWrapper topMargin>\n        <ul className={summaryStyle.toc}>\n          {categories.map(({ title, slug, summaries }) => (\n            <>\n              {summaries && summaries.find(summary => summary.resources) && (\n                <li>\n                  <strong>\n                    <Link to={`#${slug}`}>{title}</Link>\n                  </strong>\n                  <ul>\n                    {summaries.map(summary => (\n                      <>\n                        {summary.resources &&\n                          summary.resources.map(resource => (\n                            <li>\n                              <Link\n                                to={`#${slugify(resource.name, {\n                                  lower: true,\n                                })}`}\n                              >\n                                {resource.name}\n                              </Link>\n                            </li>\n                          ))}\n                      </>\n                    ))}\n                  </ul>\n                </li>\n              )}\n            </>\n          ))}\n          <li>\n            <strong>\n              <Link to=\"#federal-trackers\">Federal trackers</Link>\n            </strong>\n            <ul>\n              {data.allContentfulFederalTrackers.nodes.map(tracker => (\n                <li>\n                  <Link to={`#${slugify(tracker.name, { lower: true })}`}>\n                    {tracker.name}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </li>\n          <li>\n            <strong>\n              <Link to=\"#federal-portals\">Federal data portals</Link>\n            </strong>\n            <ul>\n              {data.allContentfulFederalDataPortal.nodes.map(tracker => (\n                <li>\n                  <Link to={`#${slugify(tracker.name, { lower: true })}`}>\n                    {tracker.name}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </li>\n        </ul>\n      </TableOfContentsWrapper>\n      {categories.map(({ title, slug, summaries }) => (\n        <>\n          {summaries && summaries.find(summary => summary.resources) && (\n            <>\n              <h2 className={summaryStyle.category} id={slug}>\n                {title}\n              </h2>\n              {summaries.map(summary => (\n                <Resources summary={summary} />\n              ))}\n            </>\n          )}\n        </>\n      ))}\n    </>\n  )\n}\n\nexport default FederalResources\n","import React from 'react'\nimport slugify from 'slugify'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport summaryStyle from './data-summary.module.scss'\n\nconst FederalTrackers = () => {\n  const data = useStaticQuery(graphql`\n    {\n      allContentfulFederalTrackers {\n        nodes {\n          agency\n          description {\n            childMarkdownRemark {\n              html\n            }\n          }\n          createdAt(formatString: \"MMMM D, yyyy\")\n          format\n          link\n          name\n        }\n      }\n      allContentfulFederalDataPortal {\n        nodes {\n          apIs\n          covid19Data\n          link\n          name\n          description {\n            childMarkdownRemark {\n              html\n            }\n          }\n          about\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <h2 id=\"federal-trackers\" className={summaryStyle.category}>\n        Federal trackers\n      </h2>\n      {data.allContentfulFederalTrackers.nodes.map(summary => (\n        <>\n          <h3 id={slugify(summary.name, { lower: true })}>{summary.name}</h3>\n          <ul>\n            {summary.format && (\n              <li>\n                <strong>Format:</strong> {summary.format}\n              </li>\n            )}\n            {summary.agency && (\n              <li>\n                <strong>Agency:</strong> {summary.agency}\n              </li>\n            )}\n            {summary.link && (\n              <li>\n                <strong>\n                  <a href={summary.link}>\n                    Link<span className=\"a11y-only\">to {summary.name}</span>\n                  </a>\n                </strong>\n              </li>\n            )}\n          </ul>\n          {summary.description && (\n            <div\n              dangerouslySetInnerHTML={{\n                __html: summary.description.childMarkdownRemark.html,\n              }}\n            />\n          )}\n        </>\n      ))}\n      <h2 id=\"federal-portals\" className={summaryStyle.category}>\n        Federal data portals\n      </h2>\n      {data.allContentfulFederalDataPortal.nodes.map(summary => (\n        <>\n          <h3 id={slugify(summary.name, { lower: true })}>{summary.name}</h3>\n          <ul>\n            {summary.link && (\n              <li>\n                <strong>\n                  <a href={summary.link}>\n                    Link<span className=\"a11y-only\"> for {summary.name}</span>\n                  </a>\n                </strong>\n              </li>\n            )}\n            {summary.about && (\n              <li>\n                <strong>\n                  <a href={summary.about}>\n                    About<span className=\"a11y-only\"> for {summary.name}</span>\n                  </a>\n                </strong>\n              </li>\n            )}\n            {summary.covid19Data && (\n              <li>\n                <strong>\n                  <a href={summary.covid19Data}>\n                    COVID-19 data\n                    <span className=\"a11y-only\"> for {summary.name}</span>\n                  </a>\n                </strong>\n              </li>\n            )}\n            {summary.apIs && (\n              <li>\n                <strong>\n                  <a href={summary.apIs}>\n                    APIs<span className=\"a11y-only\"> for {summary.name}</span>\n                  </a>\n                </strong>\n              </li>\n            )}\n          </ul>\n          {summary.description && (\n            <div\n              dangerouslySetInnerHTML={{\n                __html: summary.description.childMarkdownRemark.html,\n              }}\n            />\n          )}\n        </>\n      ))}\n    </>\n  )\n}\n\nexport default FederalTrackers\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport FederalResources from '~components/pages/about-data/federal-resources'\nimport FederalTrackers from '~components/pages/about-data/federal-trackers'\nimport Layout from '~components/layout'\nimport ContentfulContent from '~components/common/contentful-content'\n\nconst FederalResourcesPage = ({ data }) => (\n  <Layout title=\"Federal Resources\" centered>\n    <ContentfulContent\n      content={\n        data.contentfulSnippet.childContentfulSnippetContentTextNode\n          .childMarkdownRemark.html\n      }\n      id={data.contentfulSnippet.contentful_id}\n    />\n    <FederalResources />\n    <FederalTrackers />\n  </Layout>\n)\n\nexport default FederalResourcesPage\n\nexport const query = graphql`\n  {\n    contentfulSnippet(slug: { eq: \"federal-resources-prelude\" }) {\n      contentful_id\n      childContentfulSnippetContentTextNode {\n        childMarkdownRemark {\n          html\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}